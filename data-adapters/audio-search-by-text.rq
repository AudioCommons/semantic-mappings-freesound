PREFIX ac: <https://w3id.org/ac-ontology/aco#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>
PREFIX cc: <https://creativecommons.org/ns#>
PREFIX event: <http://purl.org/NET/c4dm/event.owl#>
PREFIX time: <https://www.w3.org/2006/time#>
PREFIX ebu: <http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#>
PREFIX ma: <http://www.w3.org/ns/ma-ont#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

PREFIX encoding_mp3: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_8.4>
PREFIX encoding_ogg: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_26>
PREFIX encoding_wav: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_28>
PREFIX encoding_flac: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_22>

PREFIX freesound-api-packs: <http://freesound.org/apiv2/packs/>

PREFIX freesound-sounds: <https://w3id.org/audiocommons/services/freesound/sounds/>
PREFIX freesound-users: <https://w3id.org/audiocommons/services/freesound/users/>
PREFIX freesound-packs: <https://w3id.org/audiocommons/services/freesound/packs/>
PREFIX freesound-tags: <https://w3id.org/audiocommons/services/freesound/tags/>

# TODO: check ac:author is not in the ontology
# TODO: find a way to distinguish spectrograms from waveforms without using the labels

GENERATE {
  <http://freesound.org>
      rdf:type foaf:Organization ; # prov:Agent
      foaf:name "Freesound" .

  ?searchAction
      a schema:SearchAction ;
      schema:object <http://freesound.org> ;
      schema:query "$pattern" ;
      schema:startTime $startTime ;
      schema:endTime ?endTime ;
      schema:actionStatus ?actionStatus ;
      schema:result ?audioCollection ;
      schema:error ?error .

  ?audioCollection
      rdf:type ac:AudioCollection ; #, prov:Entity ;
#      prov:wasAttributedTo <http://freesound.org> ;
      ac:nodeCount ?nodeCount .

  GENERATE {
  	?audioCollection ac:memberNode ?audioCollectionNode .
    ?audioCollectionNode
        a ac:AudioCollectionNode ;
        ac:nodeIndex ?index ;
        ac:nodeContent ?audioClip .

    ?audioClip
        a ac:AudioClip; #, prov:Entity ;
        dc:title ?title ;
        dc:description ?description ;
        ac:author ?author ;
        ac:image _:waveform_image_m, _:waveform_image_l, _:spectral_image_m, _:spectral_image_l ;
        # or schema:image (which also support indirection by schema:ImageObject)
        ac:duration ?duration ;
        cc:license ?license ;
#        prov:wasAttributedTo <http://freesound.org> ;
        ac:defaultContainerNode ?defaultContainerNode ;
        # ac:publicationOf ?signal ;
        # ac:signalChannels ?signalChannels ;
        # ac:bitsPerSample ?signalBitsPerSample ;
        # ac:sampleRate ?signalSampleRate ;
        ac:originalFile _:originalAudioFile ;
        ac:available_as _:audioFileLqOgg, _:audioFileHqOgg, _:audioFileLqMp3, _:audioFileHqMp3 .
        # or schema:encoding (it would break FRBR, but just saying...)

    _:waveform_image_m
        a ebu:Picture; #, ma:Image, schema:ImageObject, ... afv:Waveform?
        ebu:locator ?waveform_image_m_url ; # or ma:locator or schema:contentUrl
        skos:prefLabel "Waveform" ;
        ebu:frameHeight 71 ; # or ma:frameHeight or schema:height
        ebu:frameWidth 120 . # or ma:frameWidth or schema:width

    _:waveform_image_l
        a ebu:Picture; #, ma:Image, schema:ImageObject ; afv:Waveform?
        ebu:locator ?waveform_image_l_url ;
        skos:prefLabel "Waveform" ;
        ebu:frameHeight 201 ;
        ebu:frameWidth 900 .

    _:spectral_image_m
        a ebu:Picture; #, ma:Image, schema:ImageObject ; afv:Spectrogram?
        ebu:locator ?spectral_image_m_url ;
        skos:prefLabel "Spectrogram" ;
        ebu:frameHeight 50 ;
        ebu:frameWidth 50 .

    _:spectral_image_l
        a ebu:Picture; #, ma:Image, schema:ImageObject ; afv:Spectrogram?
        ebu:locator ?spectral_image_l_url ;
        skos:prefLabel "Spectrogram" ;
        ebu:frameHeight 201 ;
        ebu:frameWidth 900 .

    _:originalAudioFile
        a ebu:MediaResource; #, schema:AudioObject ;
        ebu:locator ?originalAudioFileUrl ; # or ma:locator or schema:contentUrl
        ebu:bitRate ?originalAudioFileBitrate;
        ebu:hasAudioEncodingFormat ?originalAudioFileEncoding ;
        ebu:audioChannelNumber ?signalChannels ;
        ebu:sampleSize ?signalBitsPerSample ;
        ebu:sampleRate ?signalSampleRate .

    _:audioFileLqOgg
        a ebu:MediaResource; #, schema:AudioObject ;
        ebu:locator ?audioFileLqOggUrl ; # or ma:locator or schema:contentUrl
        ebu:bitRate 80000; # 80 kbps or ma:frameWidth or ebu:width
        ebu:hasAudioEncodingFormat encoding_ogg: ;
        ebu:audioChannelNumber ?signalChannels ;
        ebu:sampleSize ?signalBitsPerSample ;
        ebu:sampleRate ?signalSampleRate .

    _:audioFileHqOgg
        a ebu:MediaResource; #, schema:AudioObject ;
        ebu:locator ?audioFileHqOggUrl ; # or ma:locator or schema:contentUrl
        ebu:bitRate 192000; # 192 kbps
        ebu:hasAudioEncodingFormat encoding_ogg: ;
        ebu:audioChannelNumber ?signalChannels ;
        ebu:sampleSize ?signalBitsPerSample ;
        ebu:sampleRate ?signalSampleRate .

    _:audioFileLqMp3
        a ebu:MediaResource; #, schema:AudioObject ;
        ebu:locator ?audioFileLqMp3Url ; # or ma:locator or schema:contentUrl
        ebu:bitRate 64000; # 64 kbps
        ebu:hasAudioEncodingFormat encoding_mp3: ;
        ebu:audioChannelNumber ?signalChannels ;
        ebu:sampleSize ?signalBitsPerSample ;
        ebu:sampleRate ?signalSampleRate .

    _:audioFileHqMp3
        a ebu:MediaResource; #, schema:AudioObject ;
        ebu:locator ?audioFileHqMp3Url ; # or ma:locator or schema:contentUrl
        ebu:bitRate 128000; # 128 kbps
        ebu:hasAudioEncodingFormat encoding_mp3: ;
        ebu:audioChannelNumber ?signalChannels ;
        ebu:sampleSize ?signalBitsPerSample ;
        ebu:sampleRate ?signalSampleRate .

    ?defaultContainerNode a ac:AudioCollectionNode .

    ?parentCollection
        a ac:AudioCollection ;
        ac:memberNode ?defaultContainerNode .

    ?audioPublication
        a ac:AudioPublication ;
        ac:publishedAudioManifestation ?audioClip ;
        event:time [
            a time:TemporalEntity, time:Instant ;
            time:inXSDDateTime ?creationDateTime
        ] .

#    ?signal
#        rdf:type ac:DigitalSignal ;
#        ac:channels ?signalChannels ;
#        ac:bitsPerSample ?signalBitsPerSample ;
#        ac:sampleRate ?signalSampleRate .

    GENERATE {?audioClip ac:audioCategory ?category}
    ITERATOR iter:JSONPath(?res, "tags[*]") AS ?tag
    WHERE {
      BIND(STR(?tag) AS ?tagStr)
      BIND(IRI(CONCAT(STR(freesound-tags:), SUBSTR(?tagStr, 2, STRLEN(?tagStr) - 2))) AS ?category)
    } .
  }
  ITERATOR iter:JSONElement(?source,"results[*]") AS ?resIterator
  WHERE {
    BIND(BNODE() AS ?audioCollectionNode)
    BIND(fn:JSONPath(?resIterator, "element") AS ?res)
    BIND(fn:JSONPath(?resIterator, "position") AS ?indexFromZero)
    BIND(?indexFromZero + 1 AS ?index)

    BIND(IRI(CONCAT(STR(freesound-sounds:), STR(fn:JSONPath(?res, "id")))) AS ?audioClip)
    BIND(IRI(fn:JSONPath(?res, "url")) AS ?homepage)
    BIND(IRI(fn:JSONPath(?res, "download")) AS ?originalAudioFileUrl)
    BIND(IRI(fn:JSONPath(?res, "bitrate")) AS ?originalAudioFileBitrate)
    BIND(COALESCE(fn:JSONPath(?res, "type"), "unknown") AS ?originalAudioFileEncodingType)

    OPTIONAL {
      VALUES (?originalAudioFileEncodingType ?originalAudioFileEncoding) {
        ("wav" encoding_wav:)
      #  ("aif")
      #  ("aiff")
        ("mp3" encoding_mp3:)
      #  ("m4a")
        ("flac" encoding_flac:)
      }
    }

    BIND(fn:JSONPath(?res, "name") AS ?title)
    BIND(fn:JSONPath(?res, "description") AS ?description)
    BIND(fn:JSONPath(?res, "pack") AS ?pack)

    OPTIONAL {
      BIND(BNODE() AS ?defaultContainerNode).
      FILTER(BOUND(?pack))
    }

    BIND(REPLACE(?pack, STR(freesound-api-packs:), STR(freesound-packs:)) AS ?packURIWithEndingSlash)
    BIND(IRI(SUBSTR(?packURIWithEndingSlash, 1, STRLEN(?packURIWithEndingSlash) - 1)) AS ?parentCollection)
    BIND(IRI(CONCAT(STR(freesound-users:), fn:JSONPath(?res, "username"))) AS ?author)

    BIND(IRI(fn:JSONPath(?res, "images.waveform_m")) AS ?waveform_image_m_url)
    BIND(IRI(fn:JSONPath(?res, "images.waveform_l")) AS ?waveform_image_l_url)
    BIND(IRI(fn:JSONPath(?res, "images.spectral_m")) AS ?spectral_image_m_url)
    BIND(IRI(fn:JSONPath(?res, "images.spectral_l")) AS ?spectral_image_l_url)

    BIND(1000 * fn:JSONPath(?res, "duration") AS ?duration)
    BIND(IRI(fn:JSONPath(?res, "license")) AS ?license)
    BIND(fn:JSONPath(?res, "tags") AS ?tagSet)

    BIND(IRI(fn:JSONPath(?res, "previews.preview-lq-ogg")) AS ?audioFileLqOggUrl)
    BIND(IRI(fn:JSONPath(?res, "previews.preview-hq-ogg")) AS ?audioFileHqOggUrl)
    BIND(IRI(fn:JSONPath(?res, "previews.preview-lq-mp3")) AS ?audioFileLqMp3Url)
    BIND(IRI(fn:JSONPath(?res, "previews.preview-hq-mp3")) AS ?audioFileHqMp3Url)

    BIND(BNODE() AS ?signal)
    BIND(fn:JSONPath(?res, "channels") AS ?signalChannels)
    BIND(fn:JSONPath(?res, "bitdepth") AS ?signalBitsPerSample)
    BIND(fn:JSONPath(?res, "samplerate") AS ?signalSampleRate)

    BIND(BNODE() AS ?audioPublication)
    BIND(xsd:dateTime(fn:JSONPath(?res, "created")) AS ?creationDateTime)
  } .
}
SOURCE <http://freesound.org/apiv2/search/text/?query=$pattern&token=$token&fields=id,name,description,images,pack,username,created,duration,license,tags,channels,bitdepth,samplerate,previews> AS ?source
WHERE {
  BIND(BNODE() AS ?searchAction)
  BIND(fn:JSONPath(?source, "results") AS ?resultSet)
  BIND(IF(BOUND(?resultSet), schema:CompletedActionStatus, schema:FailedActionStatus) AS ?actionStatus)
  OPTIONAL {
  	BIND(BNODE() AS ?audioCollection).
    FILTER(BOUND(?resultSet))
  }
  OPTIONAL {
  	BIND(BNODE() AS ?error)
    FILTER(!BOUND(?resultSet))
  }
  BIND(NOW() AS ?endTime)
}
